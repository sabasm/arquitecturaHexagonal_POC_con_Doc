"use strict";

// index.ts
var Book = class {
  constructor(id, title, author, price) {
    this.id = id;
    this.title = title;
    this.author = author;
    this.price = price;
  }
};
var Purchase = class {
  constructor(book, quantity) {
    this.book = book;
    this.quantity = quantity;
  }
  total() {
    return this.book.price * this.quantity;
  }
};
var BookStoreService = class {
  constructor(bookStore) {
    this.bookStore = bookStore;
  }
  async purchase(bookId, quantity) {
    const book = await this.bookStore.findBookById(bookId);
    const purchase = new Purchase(book, quantity);
    await this.bookStore.savePurchase(purchase);
    return purchase;
  }
};
var BookStoreDatabaseAdapter = class {
  constructor(database2) {
    this.database = database2;
  }
  async findBookById(bookId) {
    const dbRecord = await this.database.findRecord("books", bookId);
    return new Book(dbRecord.id, dbRecord.title, dbRecord.author, dbRecord.price);
  }
  async savePurchase(purchase) {
    await this.database.saveRecord("purchases", purchase);
  }
};
var MockDatabase = class {
  async findRecord(collection, id) {
    console.log(`Buscando el libro con id ${id} en la colecci\xF3n ${collection}`);
    return { id: "1", title: "Libro de prueba", author: "Autor de prueba", price: 10 };
  }
  async saveRecord(collection, record) {
    console.log(`Guardando en la colecci\xF3n ${collection}:`, record);
  }
};
var database = new MockDatabase();
var bookStoreDatabaseAdapter = new BookStoreDatabaseAdapter(database);
var bookStoreService = new BookStoreService(bookStoreDatabaseAdapter);
bookStoreService.purchase("1", 2).then((purchase) => {
  console.log(`Compra realizada:`, purchase);
  console.log(`Total de la compra:`, purchase.total());
});
//# sourceMappingURL=data:application/json;base64,
